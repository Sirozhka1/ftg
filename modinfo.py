"""
    Copyright 2021 t.me/innocoffee
    Licensed under the Apache License, Version 2.0
    
    Author is not responsible for any consequencies caused by using this
    software or any of its parts. If you have any questions or wishes, feel
    free to contact Dan by sending pm to @innocoffee_alt.
"""

#<3 title: ModuleInfo
#<3 pic: https://img.icons8.com/fluency/48/000000/info.png
#<3 desc: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ, –≤–∫–ª—é—á–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —Ñ–∏–ª—å—Ç—Ä—ã –∏ –±–æ—Ç-–∞–±—å—é–∑

from .. import loader, utils
from time import time
import asyncio
import re
import json
import requests
import hashlib


@loader.tds
class modInfoMod(loader.Module):
    strings = {"name": "ModuleInfo", 
    'template': "üëÆ‚Äç‚ôÇÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {0}</b>\n\n<b>üëÄ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:</b>\n{1}\n{2}", 
    'no_file': '<b>–ú–Ω–µ –∫–∞–∫–æ–π —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –Ω–µ –ø–æ–¥—Å–∫–∞–∂–µ—à—å?... üóø</b>', 
    'cannot_check_file': '<b>–ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª...</b>'}

    async def modinfocmd(self, message):
        """.modinfo <reply_to_file|file> - Check the file for malisious code"""
        TEMPLATE = self.strings('template', message)
        reply = await message.get_reply_message()

        if not reply:
            media = message.media
        else:
            media = reply.media

        try:
            file = await message.client.download_file(media)
        except:
            await utils.answer(message, self.strings('no_file', message))
            return
        try:
            code = file.decode('utf-8').replace('\r\n', '\n')
        except:
            await utils.answer(message, self.strings('cannot_check_file', message))
            await asyncio.sleep(3)
            await message.delete()
            return


        filter_regex = {
            ('DeleteAccou' + 'ntRequest'): r'[dD].*[eE].*[lL].*[eE].*[tT].*[eE].*[aA].*[cC].*[oO].*[uU].*[nN].*[tT].*[rR].*[eE].*[qQ].*[uU].*[eE].*[sS].*[tT]',
            'ChangePhoneRequest': r'[CC].*[hH].*[aA].*[nN].*[gG].*[eE].*[PP].*[hH].*[oO].*[nN].*[eE].*[RR].*[eE].*[qQ].*[uU].*[eE].*[sS].*[tT]',
            'FinishTakeoutSession': r'[fF].*[iI].*[nN].*[iI].*[sS].*[hH].*[TT].*[aA].*[kK].*[eE].*[oO].*[uU].*[tT].*[SS].*[eE].*[sS].*[sS].*[iI].*[oO].*[nN]',
            'SetAccountTTL': r'[sS].*[eE].*[tT].*[AA].*[cC].*[cC].*[oO].*[uU].*[nN].*[tT].*[TT].*[TT].*[LL].*[RR].*[eE].*[qQ].*[uU].*[eE].*[sS].*[tT]',
            'UpdatePasswordSettings': r'[uU].*[pP].*[dD].*[aA].*[tT].*[eE].*[PP].*[aA].*[sS].*[sS].*[wW].*[oO].*[rR].*[dD].*[SS].*[eE].*[tT].*[tT].*[iI].*[nN].*[gG].*[sS]',
            'GetAllSecureValuesRequest': r'[GG].*[eE].*[tT].*[AA].*[lL].*[lL].*[SS].*[eE].*[cC].*[uU].*[rR].*[eE].*[VV].*[aA].*[lL].*[uU].*[eE].*[sS].*[RR].*[eE].*[qQ].*[uU].*[eE].*[sS].*[tT]',
            'client.phone': r'[.]phone[^_]',
            'client.session': r'[.]session[^_]',
            'StringSession': r'StringSession',
            'Importing External Module': r'loadmod',
            'Botnet Integration': r'sh1tn3t',
            'Sources Edit (dispatcher.py)': r'dispatcher.py',
            'Sources Edit (main.py)': r'main.py',
            'Sources Edit (loader.py)': r'loader.py'
        }

        try:
            mod_name = re.search(
                r"""strings[ ]*=[ ]*{.*?name['"]:[ ]*['"](.*?)['"]""", code, re.S).group(1)
        except:
            mod_name = "Unknown"

        import_regex = [r'^[^#]rom ([^\n\r]*) import [^\n\r]*$',
                        r'^[^#]mport ([^\n\r]*)[^\n\r]*$', r"""__import__[(]['"]([^'"]*)['"][)]"""]
        imports = []
        for import_re in import_regex:
            imports = imports + \
                re.findall(import_re, code, flags=re.M | re.DOTALL)

        if '..' in imports:
            del imports[imports.index('..')]

        imports_formatted = ""
        for dependency in imports:
            imports_formatted += f"    ‚ñ´Ô∏è {dependency}\n"

        if len(imports) == 0:
            imports_formatted = "<i>–ù–µ—Ç</i>"

        comments = ""

        if 'requests' in imports:
            comments += "üîÖ –ù–∞–π–¥–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ <b>requests</b>. –û–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —Å–ª–∏–≤–∞ —Å–µ—Å—Å–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥.\n"
        if 'urllib' in imports:
            comments += "üîÖ –ù–∞–π–¥–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ <b>urllib</b>. –û–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —Å–ª–∏–≤–∞ —Å–µ—Å—Å–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥.\n"
        if 'urllib3' in imports:
            comments += "üîÖ –ù–∞–π–¥–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ <b>urllib3</b>. –û–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —Å–ª–∏–≤–∞ —Å–µ—Å—Å–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥.\n"
        if 'base64' in imports:
            comments += "üîÖ –ù–∞–π–¥–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ <b>base64</b>. –û–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–¥–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.\n"
        if 'while True' in code or 'while 1' in code:
            comments += "üîÖ –ù–∞–π–¥–µ–Ω <b>–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª</b>. –ó–∞—á–∞—Å—Ç—É—é —ç—Ç–æ –ø–ª–æ—Ö–æ —Å–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞.\n"
        if '.edit(' in code:
            comments += "üîÖ –ù–∞–π–¥–µ–Ω–æ <b>–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π</b>. –î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å —Ç–≤–∏–Ω–∫–∞.\n"
        if re.search(r'@.*?[bB][oO][tT]', code) is not None:
            comments += "üîÖ –ù–∞–π–¥–µ–Ω <b>–ë–æ—Ç-–∞–±—å—é–∑</b>. –î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å —É–º—Ä–µ—Ç –≤–º–µ—Å—Ç–µ —Å –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –±–æ—Ç–æ–º.\n"
        if 'allmodules' in code:
            comments += "üîÖ –ù–∞–π–¥–µ–Ω <b>–≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π</b>. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–∞–º-–º–æ–¥—É–ª–µ–π –∏ –∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"

        for comm, regex in filter_regex.items():
            if re.search(regex, code) is not None:
                comments = "üö´ –ù–∞–π–¥–µ–Ω –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É <code>" + \
                    comm + "</code>!\n" + comments

        api_endpoint = 'https://innocoffee.ru/ftg/mods/check?hash='
        sha1 = hashlib.sha1()
        sha1.update(code.encode('utf-8'))
        if requests.get(api_endpoint + str(sha1.hexdigest())).text == 'yes':
            comments += '\n‚úÖ <b><u>–ú–æ–¥—É–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω @innocoffee.</u> –¶–∏—Ñ—Ä–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ–¥–ø–∏—Å—å—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</b>'

        await utils.answer(message, TEMPLATE.format(mod_name, imports_formatted, comments))
