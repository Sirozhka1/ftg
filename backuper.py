"""
    Copyright 2021 t.me/innocoffee
    Licensed under the Apache License, Version 2.0
    
    Author is not responsible for any consequencies caused by using this
    software or any of its parts. If you have any questions or wishes, feel
    free to contact Dan by sending pm to @innocoffee_alt.
"""

#<3 title: Backuper
#<3 pic: https://img.icons8.com/fluency/48/000000/sync-settings.png
#<3 desc: –°–¥–µ–ª–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö FTG, –º–æ–¥—É–ª–µ–π, –∑–∞–º–µ—Ç–æ–∫ –∏ –¥—Ä. –ü–æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–µ—Ä—Ç–≤—ã—Ö —Ä–µ–ø–æ –∏ –¥—Ä—É–≥–æ–≥–æ —Ö–ª–∞–º–∞

from .. import loader, utils
import asyncio
import datetime
import io
import json
import requests
import re

@loader.tds
class BackuperMod(loader.Module):
    """Backup everything and anything"""
    strings = {"name":"Backuper"}

    async def client_ready(self, client, db):
        self.db = db
        self.client = client

    async def backupdbcmd(self, message):
        """.backupdb - –°–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ñ—Ç–≥"""
        txt = io.BytesIO(json.dumps(self.db).encode('utf-8'))
        txt.name = f"ftg-db-backup-{datetime.datetime.now().strftime('%d-%m-%Y-%H-%M')}.db"
        await self.client.send_file('me', txt)
        await self.client.send_message('me', '‚òùÔ∏è <b>–≠—Ç–æ - –±–µ–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ù–∏–∫–æ–º—É –µ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π</b>')
        await message.delete()

    async def restoredbcmd(self, message):
        """.restoredb <key> - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        reply = await message.get_reply_message()
        if not reply or not reply.media:
            await utils.answer(message, '<b>Reply to .db file</b>')
            await asyncio.sleep(3)
            await message.delete()
            return

        file = await message.client.download_file(reply.media)
        decoded_text = json.loads(file.decode('utf-8'))
        self.db.clear()
        self.db.update(**decoded_text)
        self.db.save()
        # print(decoded_text)
        await utils.answer(message, '<b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —é–∑–µ—Ä–±–æ—Ç...</b>')
        await self.allmodules.commands['restart'](await message.respond('_'))

    async def washdbcmd(self, message):
        """.wasdb <arg> - –ü–æ–º—ã—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        -1 --filemods - –£–±—Ä–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏ –º–æ–¥—É–ª–µ–π, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
        -2 --deadrepos - –£–±—Ä–∞—Ç—å –º–µ—Ä—Ç–≤—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        -3 --refactorrepos - –ó–∞–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫–∏ githubusercontent —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ
        -4 --deleteconf - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        -a --all - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"""

        await self.backupdbcmd(await message.respond('_'))

        args = utils.get_args_raw(message)

        if '-a' in args or '--all' in args:
            args = '-1 -2 -3 -4'

        res = ""
        if '--filemods' in args or '-1' in args:
            todel = []
            for x in self.db.keys(): 
                if "__extmod" in x:
                    todel.append(x)

            for delete in todel:
                self.db.pop(delete)

            res += f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(todel)} –∫–æ–Ω—Ñ–∏–≥–æ–≤ –º–æ–¥—É–ª–µ–π, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"

        if '--deadrepos' in args or '-2' in args:
            counter = 0
            mods = []
            for mod in self.db.get("friendly-telegram.modules.loader", "loaded_modules"):
                if ('http://' in mod or 'https://' in mod) and requests.get(mod).status_code == 404:
                    counter += 1
                else:
                    mods.append(mod)

            self.db.set('friendly-telegram.modules.loader', 'loaded_modules', mods)
            res += f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ {counter} –º–µ—Ä—Ç–≤—ã—Ö —Ä–µ–ø–æ"

        if '--refactorrepos' in args or '-3' in args:
            counter = json.dumps(self.db).count('githubusercontent')
            mods = re.sub(r'http[s]?:\/\/raw\.githubusercontent\.com\/([^\/]*?\/[^\/]*?)(\/[^\"\']*)', r'https://github.com/\1/raw\2', re.sub(r'http[s]?:\/\/raw%dgithubusercontent%dcom\/([^\/]*?\/[^\/]*?)(\/[^\"\']*)', r'https://github%dcom/\1/raw\2', json.dumps(self.db), flags=re.S), flags=re.S)
            self.db.clear()
            self.db.update(**json.loads(mods))

            res += f"\n‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ {counter} –º–µ—Ä—Ç–≤—ã—Ö —Ä–µ–ø–æ"

        if '--deleteconf' in args or '-4' in args:
            counter = 0
            todel = []
            for x in self.db.keys(): 
                if x.startswith('friendly-telegram.modules.'):
                    link = x.split('.', 3)[2].replace('%d', '.')
                    if link not in self.db.get("friendly-telegram.modules.loader", "loaded_modules") and link != 'loader':
                        todel.append(x)

            for delete in todel:
                self.db.pop(delete)


            res += f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(todel)} –∫–æ–Ω—Ñ–∏–≥–æ–≤ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"

        self.db.save()
        await utils.answer(message, res)

    async def backupmodscmd(self, message):
        """.backupmods - –°–¥–µ–ª–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        data = json.dumps({'loaded': self.db.get("friendly-telegram.modules.loader", "loaded_modules", []), 'unloaded': self.db.get("friendly-telegram.modules.loader", "unloaded_modules", [])})
        txt = io.BytesIO(data.encode('utf-8'))
        txt.name = f"ftg-mods-{datetime.datetime.now().strftime('%d-%m-%Y-%H-%M')}.mods"
        await self.client.send_file(utils.get_chat_id(message), txt, caption=f'ü¶ä <b>–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –º–æ–¥—É–ª–µ–π ({len(self.db.get("friendly-telegram.modules.loader", "loaded_modules", []))})</b>')

    async def restoremodscmd(self, message):
        """.restoremods <reply to file> - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        reply = await message.get_reply_message()
        if not reply or not reply.media:
            await utils.answer(message, '<b>Reply to .mods file</b>')
            await asyncio.sleep(3)
            await message.delete()
            return

        file = await message.client.download_file(reply.media)
        decoded_text = json.loads(file.decode('utf-8'))
        self.db.set("friendly-telegram.modules.loader", "loaded_modules", decoded_text['loaded'])
        self.db.set("friendly-telegram.modules.loader", "unloaded_modules", decoded_text['unloaded'])
        self.db.save()
        await utils.answer(message, 'ü¶ä <b>–ú–æ–¥—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é—Å—å</b>')
        await self.allmodules.commands['restart'](await message.respond('_'))

    async def backupnotescmd(self, message):
        """.backupnotes - –°–¥–µ–ª–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∑–∞–º–µ—Ç–æ–∫"""
        data = json.dumps(self.db.get("friendly-telegram.modules.notes", "notes", []))
        txt = io.BytesIO(data.encode('utf-8'))
        txt.name = f"ftg-notes-{datetime.datetime.now().strftime('%d-%m-%Y-%H-%M')}.notes"
        await self.client.send_file(utils.get_chat_id(message), txt, caption=f'ü¶ä <b>–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∑–∞–º–µ—Ç–æ–∫ ({len(self.db.get("friendly-telegram.modules.notes", "notes", []))})</b>')

    async def restorenotescmd(self, message):
        """.restorenotes <reply to file> - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        reply = await message.get_reply_message()
        if not reply or not reply.media:
            await utils.answer(message, '<b>Reply to .notes file</b>')
            await asyncio.sleep(3)
            await message.delete()
            return

        file = await message.client.download_file(reply.media)
        decoded_text = json.loads(file.decode('utf-8'))
        self.db.set("friendly-telegram.modules.notes", "notes", decoded_text)
        self.db.save()
        await utils.answer(message, 'ü¶ä <b>–ó–∞–º–µ—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã</b>')


